# Relatório

## Semana 1 (17/09 - 24/09) 
- Usando "net_showevents 1" foi possível imprimir no console algumas informações úteis.
- Usando "con_logfile <nome do arquivo>" foi possível salvar um log das informações do console em 
  um arquivo na pasta "C:\Program Files (x86)\Steam\steamapps\common\Portal 2\portal2". 
- Usando "log_dumpchannels" é possivel encontrar algumas informações últeis sobre o que é logado.
- Usando "log_flag" é possivel configurar que informações vão aparecer no log ou console.

## Semana 2 (24/09 - 01/10)
- O Vscript "mapspawn.nut" é chamado sempre que um level é iniciado.
- Não parece ser possivel utilizar a função "SendToConsole(string command)" no script "mapspawn.nut".
- É possivel criar um arquivo chamado "autoexec.cfg" que contem uma série de comandos de console que 
  são executados quando o jogo é iniciado. 
- O arquivo "autoexec.cfg" fica na pasta "C:\Program Files (x86)\Steam\steamapps\common\Portal 2\portal2\cfg".
- Foi feita uma fase no Hammer.
- Foi usada uma entidade logic_auto para rodar um script sempre que o mapa é iniciado.
- Falta acharmos uma maneira de configurar um titulo dinamicamente para o log.

## Semana 3 (01/10 - 09/10)
- Não parece ser possivel utilizar outras funções próprias do Squirrel que não sejam as listadas pela valve.
- Parecem existir opções de Binding, mas não sei se isso vai ajudar (Link no arquivo de Links).
- É possivel criar os logs quando usando o "condump" dessa forma é criado um arquivo com nome incrementado. 
- Outra opção seria um programa que edita o nome dos arquivos de logs e já organiza as informações neles. 
  
## Semana 4 (09/10 - 15/10)
- Habituação com Python 3.
- Estudar Regex.
- Parece ser mais complicado usar Regex do que usar String Methods para fazer a conversão do log.
- Protótipo de conversor de log. 

## Semana 5 (15/10 - 23/10)
- É possivel imprimir no console a posição atual do player e seu angulo de visão com o comando " spec_pos ".
- É necessário encontrar uma entidade lógica que posso ser ativada quando o player se movimenta ou rode continuamente durante o Jogo.
- Ler sobre as entidades lógicas no site da valve.
- É possivel ficar imprimindo no console periodicamente a posição do jogador através da entidade "logic_timer".

## Semana 6 (23/10 - 30/10)
- Foi feito um script que tabula os dados do log em um arquivo CSV.
- Quando baixamos uma fase feita por outra pessoa o arquivo vem com uma extensão ".bsp" que não possibilita a edição no Hammer.
- Para que seja possível a edição é necessário descompilar o ".bsp" criando um arquivo ".vmf" isso pode ser feito com o "BSPSource".
- Quando não apertamos 'E' para interagir com um objeto não é gerado um "Game event" logo não é considerado no nosso log.
- Pausar o jogo impede/dificulta a sincronização do tempo do jogo (que também é pausado) com o tempo de eventos externos ao jogo
  (como a captura de tela, o registro de mouse e teclado por meio de programas auxiliares).  

## Semana 7 (30/10 - )
- Se oservarmos os "Game Events" conseguimos algumas informações relevantes como :
  * Player interage com entidades utilizando o a tecla "E"
  * Player "vê" uma certa entidade
  * Player dispara um portal
  * Player solta uma entidade
  * Player volta a tocar o chão
  * Player entra em um portal
 - Não é possivel conseguir informações de quando o Player interage com uma entidade sem apertar a tecla "E" observando 
   apenas os "Games Events"
 - É necessário então observar também quando certos input e outpouts são ativados
 - Input e outputs são logados com um tempo diferente do Tick dos "Game Events"
 - Seria possivel converter um tempo para o outro, mas seria necessário que um certo evento gerassem um Tick e um tempo de input/output
 - Poderiamos fazer issso colocando sempre uma antesala com um prop_button
